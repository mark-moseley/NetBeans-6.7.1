<?xml version="1.0" encoding="UTF-8"?>
<!--
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.


The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
particular file as subject to the "Classpath" exception as provided
by Sun in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

Contributor(s):

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
Microsystems, Inc. All Rights Reserved.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
-->

<?xml-stylesheet href="../nbbuild/javadoctools/apichanges.xsl" type="text/xsl"?>
<!DOCTYPE apichanges PUBLIC "-//NetBeans//DTD API changes list 1.0//EN" "../nbbuild/javadoctools/apichanges.dtd">

<!-- INFO FOR PEOPLE ADDING CHANGES:
[most of contents snipped - see openide's apichanges for how-to instructions]
<change>
    <api name="compiler"/>
    <summary>Some brief description here, can use <b>XHTML</b></summary>
    <version major="1" minor="99"/>
    <date day="13" month="6" year="2001"/>
    <author login="jrhacker"/>
    <compatibility addition="yes"/>
    <description>
        The main description of the change here.
        Again can use full <b>XHTML</b> as needed.
    </description>
    <class package="org.openide.compiler" name="DoWhatIWantCompiler"/>
    <issue number="14309"/>
</change>
-->

<apichanges>

<!-- First, a list of API names you may use: -->
<apidefs>
        <apidef name="DebuggerCoreAPI">Debugger Core API</apidef>
</apidefs>

<!-- ACTUAL CHANGES BEGIN HERE: -->

<changes>
    <change id="generification">
        <api name="DebuggerCoreAPI"/>
        <summary>Use of some generic types in API; <code>ContextProvider</code> implemented more broadly; <code>DebuggerManager.join</code></summary>
        <version major="1" minor="13"/>
        <date day="1" month="3" year="2008"/>
        <author login="jglick"/>
        <compatibility binary="compatible" source="incompatible" modification="yes" semantic="compatible">
            <p>
                As with any generification, it is possible for old code to no longer compile. E.g.
            </p>
            <pre>List&lt;X&gt; = lookup.lookup(folder, X.class);</pre>
            <p>
                must be changed to:
            </p>
            <pre>List&lt;? extends X&gt; = lookup.lookup(folder, X.class);</pre>
        </compatibility>
        <description>
            <p>
                <code>ContextProvider</code> is now properly generified, and implemented also by:
            </p>
            <ul>
                <li><code>DebuggerEngine</code></li>
                <li><code>DebuggerInfo</code></li>
                <li><code>DebuggerManager</code></li>
                <li><code>Session</code></li>
            </ul>
            <p>
                The new method <code>DebuggerManager.join</code> can be used to merge lookup lists easily.
            </p>
        </description>
        <class package="org.netbeans.api.debugger" name="DebuggerEngine"/>
        <class package="org.netbeans.api.debugger" name="DebuggerInfo"/>
        <class package="org.netbeans.api.debugger" name="DebuggerManager"/>
        <class package="org.netbeans.api.debugger" name="Session"/>
        <issue number="128229"/>
    </change>
    <change id="debugger-dual-actions">
        <api name="DebuggerCoreAPI"/>
        <summary>Support for "dual" actions added.</summary>
        <date day="29" month="4" year="2004"/>
        <author login="jjancura"/>
        <compatibility binary="incompatible" source="incompatible" addition="yes" deletion="yes" modification="yes"/>
        <description>
            According to Debugger UI Specification there are some actions that have two different 
            meanings. for example Step Into action. When some Java Debugger session is running it steps
            into the current method. But if there is no session running it should start a new session
            for Main Project and stop in its main method. Thats why we have to update support for debugger 
            actions. Changes made:
            <ul>
                <li>
                    Support methods for managing and sharing actions has been moved from DebuggerEngine
                    to new class ActionsManager.
                </li>
                <li>
                    Debugger Action Constants has been move from DebuggerEngine to ActionsManager.
                </li>
                <li>
                    New common ancestor of DebuggerManager, Session and Debugger Engine has been 
                    introduced - LookupProvider. From now you can register the same action in differen
                    context levels.
                </li>
                <li>
                    DebuggerManager.getActionsManager () method has been added. You can register 
                    ActionProviders for default root context (managed by DebuggerManager). These actions
                    can be in enabled state even if there is no current DebuggerEngine!
                </li>
                <li>
                    DebuggerEngine parameter of method ActionsProvider.doAction (...) has been removed.
                </li>
            </ul>
        </description>
    </change>
    <change id="DebuggerEngine-synch-start">
        <api name="DebuggerCoreAPI"/>
        <summary>Support for synchronouous start of DebuggerEngines added.</summary>
        <date day="3" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility binary="incompatible" source="compatible" modification="yes"/>
        <description>
            <p>
                <code>void DebuggerManager.startDebugging (DebuggerInfo)</code> has been changed to <code>DebuggerEngine[] 
                DebuggerManager.startDebugging (DebuggerInfo)</code>. So it returns array of all DebuggerEngines
                created for given DebuggerInfo.
            </p>
        </description>
    </change>
    <change id="ToggleBreakpointAction-etc.">
        <api name="DebuggerCoreAPI"/>
        <summary>Support for ToggleBreakpointAction added, and some bugfix of Debugger Actions support API.</summary>
        <date day="9" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility binary="incompatible" source="incompatible" modification="yes"/>
        <description>
            <p>
                <code>ActionsManager.doAction (...)</code>, 
                <code>ActionsProvider.doAction (...)</code> and 
                <code>ActionsManagerListener.actionPefrormed (...)</code> methods
                will not return boolean any longer. This parameter was unusefull and it was not posible to 
                implement it in some meaningful way.
            </p>
        </description>
    </change>
    <change id="Breakpoint.group.name">
        <api name="DebuggerCoreAPI"/>
        <summary>Support for Breakpoints Group added.</summary>
        <date day="13" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility binary="compatible" source="compatible" addition="yes"/>
        <description>
            <p>
                Breakpoint.getGroupName (), Breakpoint.setGroupName () methods were added.
                Breakpoint.PROP_GROUP_NAME has been added.
            </p>
        </description>
    </change>
    <change id="ActionsProviderSupport.isEnabled-nonfinal">
        <api name="DebuggerCoreAPI"/>
        <summary>final modifier removed from ActionsProviderSupport.isEnabled.</summary>
        <version major="1" minor="3"/>
        <date day="23" month="11" year="2004"/>
        <author login="jjancura"/>
        <compatibility binary="compatible" source="compatible" modification="yes"/>
        <description>
            <p>
                Having final modifier for this method can be too obstructive in some cases. I had a problem writing tests.
            </p>
        </description>
    </change>
    <change id="ActionsManager-ActionsProvider.postAction">
        <api name="DebuggerCoreAPI"/>
        <summary>Debugger actions can be posted asynchronously.</summary>
        <version major="1" minor="5"/>
        <date day="24" month="8" year="2005"/>
        <author login="mentlicher"/>
        <compatibility binary="compatible" source="compatible" addition="yes"/>
        <description>
            <p>
                Added methods:
                <code>ActionsManager.postAction(Object)</code>, 
                <code>ActionsProvider.postAction(Object, Runnable)</code>,
                These can be used to call and implement asynchronous actions.
            </p>
        </description>
    </change>
    <change id="ActionsManager.ACTION_STEP_OPERATION">
        <api name="DebuggerCoreAPI"/>
        <summary>Support for stepping over operations.</summary>
        <version major="1" minor="9"/>
        <date day="1" month="2" year="2007"/>
        <author login="mentlicher"/>
        <compatibility binary="compatible" source="compatible" addition="yes"/>
        <description>
            <p>
                Added fields:
                <code>ActionsManager.ACTION_STEP_OPERATION</code>, 
                This constant is used in action performer which implements an operation step.
            </p>
        </description>
    </change>
    <change id="Breakpoint.validity">
        <api name="DebuggerCoreAPI"/>
        <summary>Support for breakpoint validity.</summary>
        <version major="1" minor="10"/>
        <date day="21" month="2" year="2007"/>
        <author login="mentlicher"/>
        <compatibility binary="compatible" source="compatible" addition="yes"/>
        <description>
            <p>
                Added fields:
                <code>Breakpoint.PROP_VALIDITY</code> - 
                This constant is used in property change events as a notification about change in validity.<br/>
                <code>Breakpoint.VALIDITY</code> - enumeration of constants for breakpoint validity.
            </p>
            <p>
                Added methods:
                <code>Breakpoint.getValidity()</code>,
                <code>Breakpoint.getValidityMessage()</code>,
                <code>Breakpoint.setValidity()</code> - validity management.
            </p>
        </description>
    </change>
    <change id="Breakpoint.hitCounts">
        <api name="DebuggerCoreAPI"/>
        <summary>Add filter for hit counts to breakpoints.</summary>
        <version major="1" minor="11"/>
        <date day="21" month="5" year="2007"/>
        <author login="mentlicher"/>
        <compatibility binary="compatible" source="compatible" addition="yes"/>
        <description>
             <p>
             To be able to set breakpoint for number of iterations, we need to add a filter for hit counts into Breakpoint API.
             </p>
             <p>
                 Added methods:<br/>
                 <code>Breakpoint.getHitCountFilter()</code>,
                 <code>Breakpoint.getHitCountFilteringStyle()</code>,
                 <code>Breakpoint.setHitCountFilter()</code>.
             </p>
             <p>
                 Added fields:<br/>
                 <code>Breakpoint.PROP_HIT_COUNT_FILTER</code>,
                 <code>Breakpoint.HIT_COUNT_FILTERING_STYLE</code>.
             </p>
        </description>
    </change>

    <change id="PathLookup">
        <api name="DebuggerCoreAPI"/>
        <summary>Lookup improvements and service annotation registration.</summary>
        <version major="1" minor="16"/>
        <date day="2" month="2" year="2009"/>
        <author login="mentlicher"/>
        <compatibility binary="compatible" source="compatible" addition="yes"/>
        <description>
             <p>
             In order to be able to register debugger services on System FileSystem,
             which brings more flexibility and better performance (see also
             <a href="http://www.netbeans.org/issues/show_bug.cgi?id=153093#desc7"/>),
             we add non-recursive content of <code>org.openide.util.Lookups.forPath()</code>
             into debugger lookup.
             Since debugger needs retrieve context-aware services from the lookup,
             <code>ContextAwareService</code> interface is introduced.
             </p>
             <p>
             Annotations are added for easy registration on module layers.
             <code>DebuggerServiceRegistration</code> to register implementations
             of interfaces, <code>*Provider.Registration</code> to register
             implementations of appropriate providers.
             </p>
        </description>
        <class package="org.netbeans.spi.debugger" name="DebuggerServiceRegistration" />
        <class package="org.netbeans.spi.debugger" name="ContextAwareService" />
        <class package="org.netbeans.spi.debugger" name="ContextAwareSupport" />
        <issue number="153093"/>
        <issue number="156687"/>
    </change>

    <change id="PropertiesInitializer">
        <api name="DebuggerCoreAPI"/>
        <summary>Support for providing initial values of properties.</summary>
        <version major="1" minor="17"/>
        <date day="28" month="2" year="2009"/>
        <author login="mentlicher"/>
        <compatibility binary="compatible" source="compatible" addition="yes"/>
        <description>
             <p>
             Properties.Initializer interface introduced to provide initial
             values of properties. This is necessary when properties are
             accessed from more places and it's not practical to copy default
             values to every such location.
             </p>
        </description>
        <class package="org.netbeans.api.debugger" name="Properties" />
        <issue number="158775"/>
    </change>

     <change id="PropertiesListener">
        <api name="DebuggerCoreAPI"/>
        <summary>Support for listening to changes of property values.</summary>
        <version major="1" minor="17"/>
        <date day="28" month="2" year="2009"/>
        <author login="mentlicher"/>
        <compatibility binary="compatible" source="compatible" addition="yes"/>
        <description>
             <p>
             addPropertyChangeListener() and removePropertyChangeListener()
             methods added to Properties class.
             </p>
        </description>
        <class package="org.netbeans.api.debugger" name="Properties" />
        <issue number="158907"/>
    </change>

</changes>

  <!-- Now the surrounding HTML text and document structure: -->

  <htmlcontents>
<!--

                            NO NO NO NO NO!

         ==============>    DO NOT EDIT ME!  <======================

          AUTOMATICALLY GENERATED FROM APICHANGES.XML, DO NOT EDIT

                SEE xml/api/doc/changes/apichanges.xml

-->
    <head>
      <title>Debugger Core API changes by date</title>
      <link rel="stylesheet" href="prose.css" type="text/css"/>
    </head>
    <body>

<p class="overviewlink"><a href="overview-summary.html">Overview</a></p>

<h1>Introduction</h1>

<p>This document lists changes made to the Debugger Core APIs. Please ask on the 
    <code>nbdev@netbeans.org</code>
    mailing list if you have any questions about the details of a
    change, or are wondering how to convert existing code to be compatible.
</p>

      <hr/><standard-changelists module-code-name="org.netbeans.api.debugger/1"/>

      <hr/><p>@FOOTER@</p>

    </body>
  </htmlcontents>
</apichanges>
